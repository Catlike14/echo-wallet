!function(){function n(n,t,e,r,a,c,o){try{var u=n[c](o),i=u.value}catch(n){return void e(n)}u.done?t(i):Promise.resolve(i).then(r,a)}function t(t){return function(){var e=this,r=arguments;return new Promise((function(a,c){var o=t.apply(e,r);function u(t){n(o,a,c,u,i,"next",t)}function i(t){n(o,a,c,u,i,"throw",t)}u(void 0)}))}}function e(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}function r(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}function a(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function c(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{},r=Object.keys(e);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(e).filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})))),r.forEach((function(t){a(n,t,e[t])}))}return n}function o(n,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):function(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))})),n}function u(n,t){var e,r,a,c,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return c={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(c[Symbol.iterator]=function(){return this}),c;function u(u){return function(i){return function(u){if(e)throw new TypeError("Generator is already executing.");for(;c&&(c=0,u[0]&&(o=0)),o;)try{if(e=1,r&&(a=2&u[0]?r.return:u[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,u[1])).done)return a;switch(r=0,a&&(u=[2&u[0],a.value]),u[0]){case 0:case 1:a=u;break;case 4:return o.label++,{value:u[1],done:!1};case 5:o.label++,r=u[1],u=[0];continue;case 7:u=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==u[0]&&2!==u[0])){o=0;continue}if(3===u[0]&&(!a||u[1]>a[0]&&u[1]<a[3])){o.label=u[1];break}if(6===u[0]&&o.label<a[1]){o.label=a[1],a=u;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(u);break}a[2]&&o.ops.pop(),o.trys.pop();continue}u=t.call(n,o)}catch(n){u=[6,n],r=0}finally{e=a=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,i])}}}Object.create;Object.create;var i,s=function(){"use strict";function n(t,r){e(this,n),this.name=t,this.handler=r}var t,a,o;return t=n,(a=[{key:"send",value:function(n){window.postMessage(c({action:this.name},n))}},{key:"on",value:function(n){var t=this;return new Promise((function(e,r){window.addEventListener("message",(function(a){if(a.data.action===n)return t.handler&&t.handler(a.data),a.data.error?r(a.data.error):e(a.data)}))}))}}])&&r(t.prototype,a),o&&r(t,o),n}();window.kadena={isKadena:!0,on:(i=t((function(n,t){return u(this,(function(e){switch(e.label){case 0:return[4,new s(n,(function(n){if("res_requestAccount"===n.action&&"kda.dapps"===n.target){var e=window.location.hostname||window.window.location.href;n.account&&n.account.connectedSites&&n.account.connectedSites.includes(e)?t(n):t({})}else t(n)})).on(n)];case 1:return[2,e.sent()]}}))})),function(n,t){return i.apply(this,arguments)}),request:function(){var n=t((function(n){var t,e,r,a,i;return u(this,(function(u){switch(t=window.location.hostname||window.window.location.href,e=d()||"no icon",r=n.method,a=n.networkId,i=o(c({},n),{domain:t}),r){case"kda_connect":return[2,l(a,t,e)];case"kda_disconnect":return[2,v(a,t)];case"kda_checkStatus":return[2,f(i)];case"kda_getNetwork":return[2,p()];case"kda_getChain":return[2,b()];case"kda_getSelectedAccount":return[2,k()];case"kda_requestAccount":return[2,y(a,t)];case"kda_requestSign":return[2,h(o(c({},n.data),{domain:t}))];case"kda_requestQuickSign":return[2,w(o(c({},n.data),{domain:t}))];case"kda_sendKadena":return[2,g(o(c({},n.data),{domain:t}))]}return[2]}))}));return function(t){return n.apply(this,arguments)}}()};var d=function(){for(var n,t=document.getElementsByTagName("link"),e=0;e<t.length;e+=1)"icon"!==t[e].getAttribute("rel")&&"shortcut icon"!==t[e].getAttribute("rel")||(n=t[e].getAttribute("href"));return n?n.includes("http")||n.includes("www")?n:"".concat(window.origin).concat(n):n},l=function(){var n=t((function(n,t,e){var r;return u(this,(function(a){switch(a.label){case 0:return(r=new s("kda_connect")).send({target:"kda.content",action:r.name,data:{networkId:n,domain:t,icon:e}}),[4,r.on("res_checkStatus")];case 1:return[2,a.sent().result]}}))}));return function(t,e,r){return n.apply(this,arguments)}}(),f=function(){var n=t((function(n){var t,e,r;return u(this,(function(a){switch(a.label){case 0:return t=n.networkId,e=n.domain,(r=new s("kda_checkStatus")).send({target:"kda.content",action:r.name,data:{networkId:t,domain:e}}),[4,r.on("res_checkStatus")];case 1:return[2,a.sent().result]}}))}));return function(t){return n.apply(this,arguments)}}(),h=function(){var n=t((function(n){var t;return u(this,(function(e){switch(e.label){case 0:return(t=new s("kda_requestSign")).send({target:"kda.content",action:t.name,data:n}),[4,t.on("res_requestSign")];case 1:return[2,e.sent().result]}}))}));return function(t){return n.apply(this,arguments)}}(),w=function(){var n=t((function(n){var t;return u(this,(function(e){switch(e.label){case 0:return(t=new s("kda_requestQuickSign")).send({target:"kda.content",action:t.name,data:n}),[4,t.on("res_requestQuickSign")];case 1:return[2,e.sent().result]}}))}));return function(t){return n.apply(this,arguments)}}(),p=function(){var n=t((function(){var n;return u(this,(function(t){switch(t.label){case 0:return(n=new s("kda_getNetwork")).send({target:"kda.content",action:n.name,data:{}}),[4,n.on("res_getNetwork")];case 1:return[2,t.sent().network]}}))}));return function(){return n.apply(this,arguments)}}(),b=function(){var n=t((function(){var n;return u(this,(function(t){switch(t.label){case 0:return(n=new s("kda_getChain")).send({target:"kda.content",action:n.name,data:{}}),[4,n.on("res_getChain")];case 1:return[2,t.sent().chainId]}}))}));return function(){return n.apply(this,arguments)}}(),k=function(){var n=t((function(){var n;return u(this,(function(t){switch(t.label){case 0:return(n=new s("kda_getSelectedAccount")).send({target:"kda.content",action:n.name,data:{}}),[4,n.on("res_getSelectedAccount")];case 1:return[2,t.sent().selectedAccount]}}))}));return function(){return n.apply(this,arguments)}}(),g=function(){var n=t((function(n){var t;return u(this,(function(e){switch(e.label){case 0:return(t=new s("kda_sendKadena")).send({target:"kda.content",action:t.name,data:n}),[4,t.on("res_sendKadena")];case 1:return[2,e.sent().data]}}))}));return function(t){return n.apply(this,arguments)}}(),v=function(){var n=t((function(n,t){var e;return u(this,(function(r){switch(r.label){case 0:return(e=new s("kda_disconnect")).send({target:"kda.content",action:e.name,data:{networkId:n,domain:t}}),[4,e.on("res_disconnect")];case 1:return[2,r.sent()]}}))}));return function(t,e){return n.apply(this,arguments)}}(),y=function(){var n=t((function(n,t){var e;return u(this,(function(r){switch(r.label){case 0:return(e=new s("kda_requestAccount")).send({target:"kda.content",action:e.name,data:{networkId:n,domain:t}}),[4,e.on("res_requestAccount")];case 1:return[2,r.sent().result]}}))}));return function(t,e){return n.apply(this,arguments)}}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
